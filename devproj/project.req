BEGIN REQSTATE
BEGIN REQSET
MMD = 20
END REQSET
BEGIN SIGNATURE
TRUE = K P (VB True)
FALSE = K P (VB False)
EQV = Id "\8801"
IMP = Id "\10233 "
AND = Id "\8743"
END SIGNATURE
BEGIN THEORIES
THNAMES = ["Equality","PredAxioms","PredExists","PredUniv","PropAxioms","PropConj","PropDisj","PropEquiv","PropImpl","PropMixOne","PropNot","PropSubst"]
SDAG = [[("PredUniv",["PredExists","PredAxioms","Equality","PropSubst","PropImpl","PropMixOne","PropConj","PropDisj","PropNot","PropEquiv","PropAxioms"])],[("PredExists",["PredAxioms","Equality","PropSubst","PropImpl","PropMixOne","PropConj","PropDisj","PropNot","PropEquiv","PropAxioms"])],[("PredAxioms",["Equality","PropSubst","PropImpl","PropMixOne","PropConj","PropDisj","PropNot","PropEquiv","PropAxioms"])],[("PropSubst",["PropImpl","PropConj","PropDisj","PropNot","PropEquiv","PropAxioms"])],[("PropImpl",["PropMixOne","PropConj","PropDisj","PropNot","PropEquiv","PropAxioms"])],[("PropMixOne",["PropConj","PropDisj","PropNot","PropEquiv","PropAxioms"])],[("PropConj",["PropDisj","PropNot","PropEquiv","PropAxioms"])],[("PropDisj",["PropNot","PropEquiv","PropAxioms"])],[("PropNot",["PropEquiv","PropAxioms"])],[("Equality",["PropAxioms"]),("PropEquiv",["PropAxioms"])],[("PropAxioms",[])]]
END THEORIES
CURRTHEORY = PredUniv
BEGIN LIVE-PROOFS
BEGIN MAP LIVE-PROOFS
("PredUniv","univ_true")
BEGIN LIVE-PROOF
TH-NAME: PredUniv
CJ-NAME: univ_true
CONJ = (C P (Id "\8801") [X (Id "[_]") (K P (VB True)),K P (VB True)],[])
SIDE = []
STRAT reduce
BEGIN SEQZIP
TERMZIP = (X (Id "[_]") (K P (VB True)),[Cons' P (Id "\8801") [] [K P (VB True)]])
BEGIN SEQUENT'
SIDECOND = []
LAWS' = CLaws' {hyp0 = Theory {thName = "H.univ_true", thDeps = [], known = VD (fromList [],fromList [],fromList []), laws = [], proofs = [], conjs = []}, whichC = Lft, otherC = K P (VB True)}
END SEQUENT'
END SEQZIP
FPATH: [1]
BEGIN LIST STEPS
END LIST STEPS
END LIVE-PROOF
END MAP LIVE-PROOFS
END LIVE-PROOFS
END REQSTATE
