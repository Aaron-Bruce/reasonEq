BEGIN REQSTATE
BEGIN REQSET
MMD = 20
END REQSET
BEGIN SIGNATURE
TRUE = V P (VR (Id "true",VP,WS))
FALSE = V P (VR (Id "false",VP,WS))
EQV = Id "\8801"
IMP = Id "\10233 "
AND = Id "\8743"
END SIGNATURE
BEGIN THEORIES
THNAMES = ["Equality","PredAxioms","PropAxioms","PropConj","PropDisj","PropEquiv","PropImpl","PropMixOne","PropNot"]
SDAG = [[("PredAxioms",["Equality","PropImpl","PropMixOne","PropConj","PropDisj","PropNot","PropEquiv","PropAxioms"])],[("PropImpl",["PropMixOne","PropConj","PropDisj","PropNot","PropEquiv","PropAxioms"])],[("PropMixOne",["PropConj","PropDisj","PropNot","PropEquiv","PropAxioms"])],[("PropConj",["PropDisj","PropNot","PropEquiv","PropAxioms"])],[("PropDisj",["PropNot","PropEquiv","PropAxioms"])],[("PropNot",["PropEquiv","PropAxioms"])],[("PropEquiv",["PropAxioms"])],[("Equality",[]),("PropAxioms",[])]]
END THEORIES
CURRTHEORY = PropImpl
BEGIN LIVE-PROOFS
BEGIN MAP LIVE-PROOFS
("PropImpl","\10233 _trans")
BEGIN LIVE-PROOF
TH-NAME: PropImpl
CJ-NAME: ‚üπ _trans
CONJ = (C P (Id "\10233 ") [C P (Id "\8743") [C P (Id "\10233 ") [V P (VR (Id "P",VP,WS)),V P (VR (Id "Q",VP,WS))],C P (Id "\10233 ") [V P (VR (Id "Q",VP,WS)),V P (VR (Id "R",VP,WS))]],C P (Id "\10233 ") [V P (VR (Id "P",VP,WS)),V P (VR (Id "R",VP,WS))]],SC (fromList []) (fromList []))
SIDE = SC (fromList []) (fromList [])
STRAT assume
BEGIN SEQZIP
TERMZIP = (C P (Id "\8743") [V P (VR (Id "P",VP,WS)),C P (Id "\8743") [C P (Id "\8743") [C P (Id "\8743") [V P (VR (Id "P",VP,WS)),V P (VR (Id "Q",VP,WS))],V P (VR (Id "R",VP,WS))],C P (Id "\8744") [V P (VR (Id "R",VP,WS)),C P (Id "\172") [V P (VR (Id "Q",VP,WS))]]]],[Cons' P (Id "\8744") [V P (VR (Id "R",VP,WS))] [],Cons' P (Id "\8743") [C P (Id "\8743") [C P (Id "\8743") [V P (VR (Id "P",VP,WS)),V P (VR (Id "Q",VP,WS))],V P (VR (Id "R",VP,WS))]] []])
BEGIN SEQUENT'
SIDECOND = SC (fromList []) (fromList [])
LAWS' = CLaws' {hyp0 = Theory {thName = "H.\10233 _trans", thDeps = [], known = VD (fromList [(VR (Id "P",VP,WS),KV T),(VR (Id "Q",VP,WS),KV T),(VR (Id "R",VP,WS),KV T)],fromList [],fromList []), laws = [(("H.\10233 _trans.1",(C P (Id "\10233 ") [V P (VR (Id "P",VP,WS)),V P (VR (Id "Q",VP,WS))],SC (fromList []) (fromList []))),Axiom),(("H.\10233 _trans.2",(C P (Id "\10233 ") [V P (VR (Id "Q",VP,WS)),V P (VR (Id "R",VP,WS))],SC (fromList []) (fromList []))),Axiom),(("H.\10233 _trans.3",(V P (VR (Id "P",VP,WS)),SC (fromList []) (fromList []))),Axiom),(("H.\10233 _trans.1",(C P (Id "\8744") [C P (Id "\172") [V P (VR (Id "P",VP,WS))],V P (VR (Id "Q",VP,WS))],SC (fromList []) (fromList []))),Axiom),(("H.\10233 _trans.2",(C P (Id "\8744") [C P (Id "\172") [V P (VR (Id "Q",VP,WS))],V P (VR (Id "R",VP,WS))],SC (fromList []) (fromList []))),Axiom)], proofs = [], conjs = []}, whichC = Lft, otherC = V P (VR (Id "true",VP,WS))}
END SEQUENT'
END SEQZIP
FPATH: [2,2]
BEGIN LIST STEPS
(CloneH 3,C P (Id "\8743") [C P (Id "\8743") [C P (Id "\8743") [V P (VR (Id "P",VP,WS)),V P (VR (Id "Q",VP,WS))],V P (VR (Id "R",VP,WS))],C P (Id "\8744") [V P (VR (Id "R",VP,WS)),C P (Id "\172") [V P (VR (Id "Q",VP,WS))]]])
(UseLaw ByMatch "\8743_assoc" (BD (fromList [((Id "P",VP),BT (C P (Id "\8743") [V P (VR (Id "P",VP,WS)),V P (VR (Id "Q",VP,WS))])),((Id "Q",VP),BV (VR (Id "R",VP,WS))),((Id "R",VP),BT (C P (Id "\8744") [V P (VR (Id "R",VP,WS)),C P (Id "\172") [V P (VR (Id "Q",VP,WS))]]))],fromList [],fromList [])) [],C P (Id "\8743") [C P (Id "\8743") [V P (VR (Id "P",VP,WS)),V P (VR (Id "Q",VP,WS))],C P (Id "\8743") [V P (VR (Id "R",VP,WS)),C P (Id "\8744") [V P (VR (Id "R",VP,WS)),C P (Id "\172") [V P (VR (Id "Q",VP,WS))]]]])
(UseLaw ByMatch "\8744_symm" (BD (fromList [((Id "P",VP),BV (VR (Id "R",VP,WS))),((Id "Q",VP),BT (C P (Id "\172") [V P (VR (Id "Q",VP,WS))]))],fromList [],fromList [])) [2,2],C P (Id "\8743") [C P (Id "\8743") [V P (VR (Id "P",VP,WS)),V P (VR (Id "Q",VP,WS))],C P (Id "\8743") [V P (VR (Id "R",VP,WS)),C P (Id "\8744") [C P (Id "\172") [V P (VR (Id "Q",VP,WS))],V P (VR (Id "R",VP,WS))]]])
(UseLaw ByMatch "\8743_symm" (BD (fromList [((Id "P",VP),BV (VR (Id "R",VP,WS))),((Id "Q",VP),BT (C P (Id "\8744") [C P (Id "\172") [V P (VR (Id "Q",VP,WS))],V P (VR (Id "R",VP,WS))]))],fromList [],fromList [])) [2],C P (Id "\8743") [C P (Id "\8743") [V P (VR (Id "P",VP,WS)),V P (VR (Id "Q",VP,WS))],C P (Id "\8743") [C P (Id "\8744") [C P (Id "\172") [V P (VR (Id "Q",VP,WS))],V P (VR (Id "R",VP,WS))],V P (VR (Id "R",VP,WS))]])
(UseLaw ByMatch "\8743_\172_\8744_absorb" (BD (fromList [((Id "P",VP),BV (VR (Id "P",VP,WS))),((Id "Q",VP),BV (VR (Id "Q",VP,WS)))],fromList [],fromList [])) [1],C P (Id "\8743") [C P (Id "\8743") [V P (VR (Id "P",VP,WS)),C P (Id "\8744") [C P (Id "\172") [V P (VR (Id "P",VP,WS))],V P (VR (Id "Q",VP,WS))]],C P (Id "\8743") [C P (Id "\8744") [C P (Id "\172") [V P (VR (Id "Q",VP,WS))],V P (VR (Id "R",VP,WS))],V P (VR (Id "R",VP,WS))]])
(UseLaw ByMatch "\8743_assoc" (BD (fromList [((Id "P",VP),BV (VR (Id "P",VP,WS))),((Id "Q",VP),BT (C P (Id "\8744") [C P (Id "\172") [V P (VR (Id "P",VP,WS))],V P (VR (Id "Q",VP,WS))])),((Id "R",VP),BT (C P (Id "\8743") [C P (Id "\8744") [C P (Id "\172") [V P (VR (Id "Q",VP,WS))],V P (VR (Id "R",VP,WS))],V P (VR (Id "R",VP,WS))]))],fromList [],fromList [])) [],C P (Id "\8743") [V P (VR (Id "P",VP,WS)),C P (Id "\8743") [C P (Id "\8744") [C P (Id "\172") [V P (VR (Id "P",VP,WS))],V P (VR (Id "Q",VP,WS))],C P (Id "\8743") [C P (Id "\8744") [C P (Id "\172") [V P (VR (Id "Q",VP,WS))],V P (VR (Id "R",VP,WS))],V P (VR (Id "R",VP,WS))]]])
(CloneH 3,C P (Id "\8743") [C P (Id "\8744") [C P (Id "\172") [V P (VR (Id "P",VP,WS))],V P (VR (Id "Q",VP,WS))],C P (Id "\8743") [C P (Id "\8744") [C P (Id "\172") [V P (VR (Id "Q",VP,WS))],V P (VR (Id "R",VP,WS))],V P (VR (Id "R",VP,WS))]])
(CloneH 4,C P (Id "\8743") [C P (Id "\8744") [C P (Id "\172") [V P (VR (Id "Q",VP,WS))],V P (VR (Id "R",VP,WS))],V P (VR (Id "R",VP,WS))])
(CloneH 5,V P (VR (Id "R",VP,WS)))
(Switch (Hyp 2) CLeft,C P (Id "\8744") [C P (Id "\172") [V P (VR (Id "Q",VP,WS))],V P (VR (Id "R",VP,WS))])
(UseLaw ByMatch "\10233 _def2" (BD (fromList [((Id "P",VP),BV (VR (Id "Q",VP,WS))),((Id "Q",VP),BV (VR (Id "R",VP,WS)))],fromList [],fromList [])) [],C P (Id "\10233 ") [V P (VR (Id "Q",VP,WS)),V P (VR (Id "R",VP,WS))])
(Switch CLeft (Hyp 2),V P (VR (Id "R",VP,WS)))
(Switch (Hyp 1) CLeft,C P (Id "\8744") [C P (Id "\172") [V P (VR (Id "P",VP,WS))],V P (VR (Id "Q",VP,WS))])
(UseLaw ByMatch "\10233 _def2" (BD (fromList [((Id "P",VP),BV (VR (Id "P",VP,WS))),((Id "Q",VP),BV (VR (Id "Q",VP,WS)))],fromList [],fromList [])) [],C P (Id "\10233 ") [V P (VR (Id "P",VP,WS)),V P (VR (Id "Q",VP,WS))])
(Switch CLeft (Hyp 1),V P (VR (Id "R",VP,WS)))
END LIST STEPS
END LIVE-PROOF
END MAP LIVE-PROOFS
END LIVE-PROOFS
END REQSTATE
