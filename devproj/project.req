BEGIN REQSTATE
BEGIN REQSET
MMD = 20
MHT = False
MHQ = True
MHF = False
END REQSET
BEGIN SIGNATURE
TRUE = K P (VB True)
FALSE = K P (VB False)
EQV = Id "equiv" 0
IMP = Id "implies" 0
AND = Id "land" 0
OR = Id "lor" 0
END SIGNATURE
BEGIN THEORIES
THNAMES = ["And","AndOrInvert","Equality","Equiv","Exists","ForAll","Implies","Not","Or","UClose","UTPBase"]
SDAG = [[("UTPBase",["UClose","Exists","ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("UClose",["Exists","ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("Exists",["ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("ForAll",["Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("Equality",["Implies","Equiv"])],[("Implies",["AndOrInvert","And","Or","Not","Equiv"])],[("AndOrInvert",["And","Or","Not","Equiv"])],[("And",["Or","Not","Equiv"])],[("Or",["Not","Equiv"])],[("Not",["Equiv"])],[("Equiv",[])]]
END THEORIES
CURRTHEORY = UTPBase
BEGIN LIVE-PROOFS
BEGIN MAP LIVE-PROOFS
("UTPBase",":=_unchanged")
BEGIN LIVE-PROOF
TH-NAME: UTPBase
CJ-NAME: :=_unchanged
CONJ = ASN (C P True (Id "equiv" 0) [S P (V P (VR (Id ":=" 0,VP,WT))) (SN (fromList [(VR (Id "x" 0,VO,WB),V (E T) (VR (Id "e" 0,VE,WB)))]) (fromList [])),S P (V P (VR (Id ":=" 0,VP,WT))) (SN (fromList [(VR (Id "x" 0,VO,WB),V (E T) (VR (Id "e" 0,VE,WB))),(VR (Id "y" 0,VO,WB),V (E T) (VR (Id "y" 0,VO,WB)))]) (fromList []))],([],fromList []))
SIDE = ([],fromList [])
STRAT redboth
BEGIN SEQZIP
TERMZIP = (C P True (Id "land" 0) [C P True (Id "=" 0) [V (E T) (VR (Id "x" 0,VO,WA)),V (E T) (VR (Id "e" 0,VE,WB))],C P True (Id "land" 0) [C P True (Id "=" 0) [V (E T) (VR (Id "y" 0,VO,WA)),V (E T) (VR (Id "y" 0,VO,WB))],I P True (Id "land" 0) True (Id "=" 0) [LV (VR (Id "O" 0,VO,WA),[Id "x" 0,Id "y" 0],[]),LV (VR (Id "O" 0,VO,WB),[Id "x" 0,Id "y" 0],[])]]],[])
BEGIN SEQUENT'
SIDECOND = ([],fromList [])
LAWS' = CLaws' {hyp0 = Theory {thName = "H.:=_unchanged", thDeps = [], known = VD (fromList [],fromList [],fromList []), laws = [], proofs = [], conjs = []}, whichC = Rght, otherC = C P True (Id "land" 0) [C P True (Id "=" 0) [V (E T) (VR (Id "x" 0,VO,WA)),V (E T) (VR (Id "e" 0,VE,WB))],I P True (Id "land" 0) True (Id "=" 0) [LV (VR (Id "O" 0,VO,WA),[Id "x" 0],[]),LV (VR (Id "O" 0,VO,WB),[Id "x" 0],[])]]}
END SEQUENT'
END SEQZIP
FPATH: []
BEGIN LIST STEPS
(UseLaw (ByMatch MEL) "land_assoc" (BD (fromList [((Id "P" 0,VP),BT (C P True (Id "=" 0) [V (E T) (VR (Id "x" 0,VO,WA)),V (E T) (VR (Id "e" 0,VE,WB))])),((Id "Q" 0,VP),BT (C P True (Id "=" 0) [V (E T) (VR (Id "y" 0,VO,WA)),V (E T) (VR (Id "y" 0,VO,WB))])),((Id "R" 0,VP),BT (I P True (Id "land" 0) True (Id "=" 0) [LV (VR (Id "O" 0,VO,WA),[Id "x" 0,Id "y" 0],[]),LV (VR (Id "O" 0,VO,WB),[Id "x" 0,Id "y" 0],[])]))],fromList [],fromList [])) [],ASN (C P True (Id "land" 0) [C P True (Id "land" 0) [C P True (Id "=" 0) [V (E T) (VR (Id "x" 0,VO,WA)),V (E T) (VR (Id "e" 0,VE,WB))],C P True (Id "=" 0) [V (E T) (VR (Id "y" 0,VO,WA)),V (E T) (VR (Id "y" 0,VO,WB))]],I P True (Id "land" 0) True (Id "=" 0) [LV (VR (Id "O" 0,VO,WA),[Id "x" 0,Id "y" 0],[]),LV (VR (Id "O" 0,VO,WB),[Id "x" 0,Id "y" 0],[])]],([],fromList [])))
(UseLaw (ByMatch MEL) ":=_def" (BD (fromList [((Id ":=" 0,VP),BI (Id ":=" 0))],fromList [],fromList [((Id "O" 0,VO,[],[Id "x" 0]),BL [GL (LV (VR (Id "O" 0,VO,WB),[Id "x" 0,Id "y" 0],[]))]),((Id "e" 0,VE,[],[]),BX [Right (V (E T) (VR (Id "e" 0,VE,WB))),Right (V (E T) (VR (Id "y" 0,VO,WB)))]),((Id "x" 0,VO,[],[]),BL [GV (VR (Id "x" 0,VO,WB)),GV (VR (Id "y" 0,VO,WB))])])) [],ASN (S P (V P (VR (Id ":=" 0,VP,WT))) (SN (fromList [(VR (Id "x" 0,VO,WB),V (E T) (VR (Id "e" 0,VE,WB))),(VR (Id "y" 0,VO,WB),V (E T) (VR (Id "y" 0,VO,WB)))]) (fromList [])),([],fromList [])))
(Switch CLeft CRight,ASN (C P True (Id "land" 0) [C P True (Id "=" 0) [V (E T) (VR (Id "x" 0,VO,WA)),V (E T) (VR (Id "e" 0,VE,WB))],I P True (Id "land" 0) True (Id "=" 0) [LV (VR (Id "O" 0,VO,WA),[Id "x" 0],[]),LV (VR (Id "O" 0,VO,WB),[Id "x" 0],[])]],([],fromList [])))
(UseLaw (ByMatch MEL) ":=_def" (BD (fromList [((Id ":=" 0,VP),BI (Id ":=" 0))],fromList [],fromList [((Id "O" 0,VO,[],[Id "x" 0]),BL [GL (LV (VR (Id "O" 0,VO,WB),[Id "x" 0],[]))]),((Id "e" 0,VE,[],[]),BX [Right (V (E T) (VR (Id "e" 0,VE,WB)))]),((Id "x" 0,VO,[],[]),BL [GV (VR (Id "x" 0,VO,WB))])])) [],ASN (S P (V P (VR (Id ":=" 0,VP,WT))) (SN (fromList [(VR (Id "x" 0,VO,WB),V (E T) (VR (Id "e" 0,VE,WB)))]) (fromList [])),([],fromList [])))
END LIST STEPS
END LIVE-PROOF
END MAP LIVE-PROOFS
END LIVE-PROOFS
END REQSTATE
