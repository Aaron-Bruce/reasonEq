BEGIN REQSTATE
BEGIN REQSET
MMD = 10000
MHT = False
MHQ = True
MHF = True
END REQSET
BEGIN SIGNATURE
TRUE = K P (VB True)
FALSE = K P (VB False)
EQV = Id "equiv" 0
IMP = Id "implies" 0
AND = Id "land" 0
OR = Id "lor" 0
END SIGNATURE
BEGIN THEORIES
THNAMES = ["And","AndOrInvert","Equality","Equiv","Exists","ForAll","Implies","Not","Or","UClose","UTPBase"]
SDAG = [[("UTPBase",["UClose","Exists","ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("UClose",["Exists","ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("Exists",["ForAll","Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("ForAll",["Equality","Implies","AndOrInvert","And","Or","Not","Equiv"])],[("Equality",["Implies","Equiv"])],[("Implies",["AndOrInvert","And","Or","Not","Equiv"])],[("AndOrInvert",["And","Or","Not","Equiv"])],[("And",["Or","Not","Equiv"])],[("Or",["Not","Equiv"])],[("Not",["Equiv"])],[("Equiv",[])]]
END THEORIES
CURRTHEORY = UTPBase
BEGIN LIVE-PROOFS
BEGIN MAP LIVE-PROOFS
("UTPBase",":=_simple")
BEGIN LIVE-PROOF
TH-NAME: UTPBase
CJ-NAME: :=_simple
CONJ = ASN (C P True (Id "equiv" 0) [S P (V P (VR (Id ":=" 0,VP,WS))) (SN (fromList [(VR (Id "x" 0,VO,WB),V (E (TG (Id "Z" 0))) (VR (Id "e" 0,VE,WB)))]) (fromList [])),C P True (Id "land" 0) [C P True (Id "=" 0) [V (E T) (VR (Id "x" 0,VO,WA)),V (E (TG (Id "Z" 0))) (VR (Id "e" 0,VE,WB))],I P True (Id "land" 0) True (Id "=" 0) [LV (VR (Id "O" 0,VO,WA),[Id "x" 0],[]),LV (VR (Id "O" 0,VO,WB),[Id "x" 0],[])]]],([],fromList []))
SIDE = ([],fromList [])
STRAT redinit
BEGIN SEQZIP
TERMZIP = (S P (V P (VR (Id ":=" 0,VP,WS))) (SN (fromList [(VR (Id "x" 0,VO,WB),V (E (TG (Id "Z" 0))) (VR (Id "e" 0,VE,WB)))]) (fromList [])),[])
BEGIN SEQUENT'
SIDECOND = ([],fromList [])
LAWS' = CLaws' {hyp0 = Theory {thName = "H.:=_simple", thDeps = [], known = VD (fromList [],fromList [],fromList []), laws = [], proofs = [], conjs = []}, whichC = Lft, otherC = C P True (Id "land" 0) [C P True (Id "=" 0) [V (E T) (VR (Id "x" 0,VO,WA)),V (E (TG (Id "Z" 0))) (VR (Id "e" 0,VE,WB))],I P True (Id "land" 0) True (Id "=" 0) [LV (VR (Id "O" 0,VO,WA),[Id "x" 0],[]),LV (VR (Id "O" 0,VO,WB),[Id "x" 0],[])]]}
END SEQUENT'
END SEQZIP
FPATH: []
BEGIN LIST STEPS
END LIST STEPS
END LIVE-PROOF
END MAP LIVE-PROOFS
END LIVE-PROOFS
END REQSTATE
