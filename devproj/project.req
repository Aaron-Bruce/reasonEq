BEGIN REQSTATE
BEGIN SIGNATURE
TRUE = V P (VR (Id "true",VP,WS))
FALSE = V P (VR (Id "false",VP,WS))
EQV = Id "\8801"
IMP = Id "\10233 "
AND = Id "\8743"
END SIGNATURE
BEGIN THEORIES
THNAMES = ["PropAxioms","PropDisj","PropEquiv","PropNot"]
SDAG = [[("PropDisj",["PropNot","PropEquiv","PropAxioms"])],[("PropNot",["PropEquiv","PropAxioms"])],[("PropEquiv",["PropAxioms"])],[("PropAxioms",[])]]
END THEORIES
CURRTHEORY = PropDisj
BEGIN LIVE-PROOFS
BEGIN MAP LIVE-PROOFS
("PropDisj","\8744-\8801_split")
BEGIN LIVE-PROOF
TH-NAME: PropDisj
CJ-NAME: ∨-≡_split
CONJ = (C P (Id "\8801") [C P (Id "\8744") [V P (VR (Id "P",VP,WS)),V P (VR (Id "Q",VP,WS))],C P (Id "\8744") [V P (VR (Id "P",VP,WS)),C P (Id "\172") [V P (VR (Id "Q",VP,WS))]],V P (VR (Id "P",VP,WS))],SC (fromList []) (fromList []))
SIDE = SC (fromList []) (fromList [])
STRAT redboth
BEGIN SEQZIP
TERMZIP = (C P (Id "\8801") [C P (Id "\8744") [V P (VR (Id "P",VP,WS)),V P (VR (Id "Q",VP,WS))],C P (Id "\8744") [V P (VR (Id "P",VP,WS)),C P (Id "\172") [V P (VR (Id "Q",VP,WS))]]],[])
BEGIN SEQUENT'
SIDECOND = SC (fromList []) (fromList [])
LAWS' = CLaws' {hyp0 = Theory {thName = "H.\8744-\8801_split", thDeps = [], known = VD (fromList [],fromList [],fromList []), laws = [], proofs = [], conjs = []}, whichC = Lft, otherC = V P (VR (Id "P",VP,WS))}
END SEQUENT'
END SEQZIP
FPATH: []
BEGIN LIST STEPS
END LIST STEPS
END LIVE-PROOF
END MAP LIVE-PROOFS
END LIVE-PROOFS
END REQSTATE
