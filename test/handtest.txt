identi nm i = fromJust $ ident (nm++show i)
mkPS i = StdVar $ PreVar  $ identi "ps" i
mkPL i = LstVar $ PreVars $ identi "pl" i
mkCS i = StdVar $ PreVar  $ identi "cs" i
mkCL i = LstVar $ PreVars $ identi "cl" i
bindVV (StdVar pv)  (StdVar cv)   =  fromJust . bindVarToVar pv cv
bindLL (LstVar plv) cgv  =  fromJust . bindLVarToVList plv [cgv]

[ps1,ps2,ps3,ps4] = map mkPS [1..4]  -- std pattern vars
[pl1,pl2,pl3,pl4] = map mkPL [1..4]  -- lst pattern vars
[cs1,cs2,cs3,cs4] = map mkCS [1..4]  -- std candidate vars
[cl1,cl2,cl3,cl4] = map mkCL [1..4]  -- lst candidate vars

bindPSi2CSi :: Binding
bindPSi2CSi
 = bindVV ps1 cs1 $ bindVV ps2 cs2 $ bindVV ps3 cs3 $ bindVV ps4 cs4 emptyBinding
bindPLi2CLi
 = bindLL pl1 cl1 $ bindLL pl2 cl2 $ bindLL pl3 cl3 $ bindLL pl4 cl4 emptyBinding
bindAll
 = bindVV ps1 cs1 $ bindVV ps2 cs2 $ bindVV ps3 cs3 $ bindVV ps4 cs4
 $ bindLL pl1 cl1 $ bindLL pl2 cl2 $ bindLL pl3 cl3 $ bindLL pl4 cl4 emptyBinding


applyBindingsToLists [psi->csi,pli->cli] [cs1,cl1,cs2,cl2] [ps1,pl1,ps2,pl2]
=
applyBindingsToLists' bind [] [] [] 0 0 [cs1,cl1,cs2,cl2] [ps1,pl1,ps2,pl2]
=
gotStdBinding bind subM vlC' vlP' iC (iP+1) vlP rv vlC
